package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"text/template"
)

//go:embed template.mk
var tmplData string

var tmpl = template.Must(template.New("main").Parse(tmplData))

type Tool struct {
	Name     string
	Dir      string
	Flags    string
	Deps     string
	ProdDeps string
}

type Build struct {
	Name string
	Env  string
}
type Bundle struct {
	Name     string
	Copy     []string
	SubDir   string
	Binaries []string
}

func (b Bundle) DirName() string {
	if b.SubDir != "" {
		return b.SubDir
	}
	return b.Name
}

func newTool(path string) Tool {
	dir := filepath.Dir(path)
	return Tool{
		Name: filepath.Base(dir),
		Dir:  dir,
	}
}

func main() {
	var data struct {
		Tools   []Tool
		Builds  []Build
		Bundles []Bundle
	}

	data.Builds = []Build{
		{Name: "linux-amd64", Env: "GOOS=linux GOARCH=amd64"},
		{Name: "linux-arm", Env: "GOOS=linux GOARCH=arm GOARM=7"},
		{Name: "linux-arm64", Env: "GOOS=linux GOARCH=arm64"},
		{Name: "darwin-amd64", Env: "GOOS=darwin GOARCH=amd64"},
	}
	data.Bundles = []Bundle{
		{Name: "goalert", Binaries: []string{"goalert"}},
		{
			Name:   "integration",
			SubDir: "goalert",
			Copy: []string{
				"$(BIN_DIR)/integration/goalert/devtools",
				"$(BIN_DIR)/integration/goalert/.git",
				"$(BIN_DIR)/integration/goalert/COMMIT",
				"$(BIN_DIR)/integration/goalert/cypress",
				"$(BIN_DIR)/integration/goalert/cypress.json",
			},
			Binaries: []string{
				"goalert",
				"mockslack",
				"pgdump-lite",
				"psql-lite",
				"procwrap",
				"simpleproxy",
				"waitfor",
			},
		},
	}

	for _, pattern := range []string{"./devtools/*/main.go", "./devtools/*/cmd/*/main.go"} {
		files, err := filepath.Glob(pattern)
		if err != nil {
			panic(err)
		}
		for _, t := range files {
			tool := newTool(t)
			data.Tools = append(data.Tools, tool)
		}
	}
	files, err := filepath.Glob("./cmd/*/main.go")
	if err != nil {
		panic(err)
	}
	for _, t := range files {
		tool := newTool(t)
		if tool.Name == "goalert" {
			tool.Flags = `-ldflags "$(LD_FLAGS)"`
			tool.Deps = "graphql2/mapconfig.go"
			tool.ProdDeps = "web/src/build/static/app.js"
		}
		data.Tools = append(data.Tools, tool)
	}

	sort.Slice(data.Tools, func(i, j int) bool { return data.Tools[i].Name < data.Tools[j].Name })
	sort.Slice(data.Builds, func(i, j int) bool { return data.Builds[i].Name < data.Builds[j].Name })

	var buf bytes.Buffer
	err = tmpl.Execute(&buf, data)
	if err != nil {
		panic(err)
	}
	fmt.Print("# Code generated by devtools/genmake, DO NOT EDIT.\n\n")
	buf.WriteTo(os.Stdout)
}
