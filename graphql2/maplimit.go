// Code generated by devtools/limitapigen DO NOT EDIT.

package graphql2

import (
	"fmt"

	"github.com/target/goalert/limit"
	"github.com/target/goalert/validation"
)

// MapLimitValues will map a Limit struct into a flat list of SystemLimit structs.
func MapLimitValues(l limit.Limits) []SystemLimit {
	return []SystemLimit{
		{ID: "CalendarSubscriptionsPerUser", Description: "Maximum number of calendar subscriptions per user.", Value: l[limit.CalendarSubscriptionsPerUser]},
		{ID: "ContactMethodsPerUser", Description: "Maximum number of contact methods per user.", Value: l[limit.ContactMethodsPerUser]},
		{ID: "EPActionsPerStep", Description: "Maximum number of actions on a single escalation policy step.", Value: l[limit.EPActionsPerStep]},
		{ID: "EPStepsPerPolicy", Description: "Maximum number of steps on a single escalation policy.", Value: l[limit.EPStepsPerPolicy]},
		{ID: "HeartbeatMonitorsPerService", Description: "Maximum number of heartbeat monitors per service.", Value: l[limit.HeartbeatMonitorsPerService]},
		{ID: "IntegrationKeysPerService", Description: "Maximum number of integration keys per service.", Value: l[limit.IntegrationKeysPerService]},
		{ID: "MaxAllForAlertStatusPer20Minutes", Description: "All Message Type Limit for alert notifications per 20 minutes.", Value: l[limit.MaxAllForAlertStatusPer20Minutes]},
		{ID: "MaxAllForAlertStatusPer2Hours", Description: "All Message Type Limit for alert notifications per 2 hours.", Value: l[limit.MaxAllForAlertStatusPer2Hours]},
		{ID: "MaxAllForAlertStatusPer3Minutes", Description: "All Message Type Limit for alert notifications per 3 minutes.", Value: l[limit.MaxAllForAlertStatusPer3Minutes]},
		{ID: "MaxSMSPer15Minutes", Description: "SMS Limit for alert notifications per 15 minutes.", Value: l[limit.MaxSMSPer15Minutes]},
		{ID: "MaxSMSPer3Hours", Description: "SMS Limit for alert notifications per 3 hours.", Value: l[limit.MaxSMSPer3Hours]},
		{ID: "MaxSMSPerHour", Description: "SMS  Limit for alert notifications per hour.", Value: l[limit.MaxSMSPerHour]},
		{ID: "MaxVoicePer15Minutes", Description: "Voice Limit for alert notifications per 15 minutes.", Value: l[limit.MaxVoicePer15Minutes]},
		{ID: "MaxVoicePer3Hours", Description: "Voice Limit for alert notifications per 3 hours.", Value: l[limit.MaxVoicePer3Hours]},
		{ID: "MaxVoicePerHour", Description: "Voice Limit for alert notifications per hour.", Value: l[limit.MaxVoicePerHour]},
		{ID: "NotificationRulesPerUser", Description: "Maximum number of notification rules per user.", Value: l[limit.NotificationRulesPerUser]},
		{ID: "ParticipantsPerRotation", Description: "Maximum number of participants per rotation.", Value: l[limit.ParticipantsPerRotation]},
		{ID: "RulesPerSchedule", Description: "Pertains to all rules for all assignments/targets.", Value: l[limit.RulesPerSchedule]},
		{ID: "TargetsPerSchedule", Description: "Maximum number of targets per schedule.", Value: l[limit.TargetsPerSchedule]},
		{ID: "UnackedAlertsPerService", Description: "Only affects newly created alerts but not re-escalated ones.", Value: l[limit.UnackedAlertsPerService]},
		{ID: "UserOverridesPerSchedule", Description: "Only limits future overrides (i.e. end in the future).", Value: l[limit.UserOverridesPerSchedule]},
	}
}

// ApplyLimitValues will apply a list of LimitValues to a Limit struct.
func ApplyLimitValues(l limit.Limits, vals []SystemLimitInput) (limit.Limits, error) {
	for _, v := range vals {
		switch v.ID {
		case "CalendarSubscriptionsPerUser":
			l[limit.CalendarSubscriptionsPerUser] = v.Value
		case "ContactMethodsPerUser":
			l[limit.ContactMethodsPerUser] = v.Value
		case "EPActionsPerStep":
			l[limit.EPActionsPerStep] = v.Value
		case "EPStepsPerPolicy":
			l[limit.EPStepsPerPolicy] = v.Value
		case "HeartbeatMonitorsPerService":
			l[limit.HeartbeatMonitorsPerService] = v.Value
		case "IntegrationKeysPerService":
			l[limit.IntegrationKeysPerService] = v.Value
		case "MaxAllForAlertStatusPer20Minutes":
			l[limit.MaxAllForAlertStatusPer20Minutes] = v.Value
		case "MaxAllForAlertStatusPer2Hours":
			l[limit.MaxAllForAlertStatusPer2Hours] = v.Value
		case "MaxAllForAlertStatusPer3Minutes":
			l[limit.MaxAllForAlertStatusPer3Minutes] = v.Value
		case "MaxSMSPer15Minutes":
			l[limit.MaxSMSPer15Minutes] = v.Value
		case "MaxSMSPer3Hours":
			l[limit.MaxSMSPer3Hours] = v.Value
		case "MaxSMSPerHour":
			l[limit.MaxSMSPerHour] = v.Value
		case "MaxVoicePer15Minutes":
			l[limit.MaxVoicePer15Minutes] = v.Value
		case "MaxVoicePer3Hours":
			l[limit.MaxVoicePer3Hours] = v.Value
		case "MaxVoicePerHour":
			l[limit.MaxVoicePerHour] = v.Value
		case "NotificationRulesPerUser":
			l[limit.NotificationRulesPerUser] = v.Value
		case "ParticipantsPerRotation":
			l[limit.ParticipantsPerRotation] = v.Value
		case "RulesPerSchedule":
			l[limit.RulesPerSchedule] = v.Value
		case "TargetsPerSchedule":
			l[limit.TargetsPerSchedule] = v.Value
		case "UnackedAlertsPerService":
			l[limit.UnackedAlertsPerService] = v.Value
		case "UserOverridesPerSchedule":
			l[limit.UserOverridesPerSchedule] = v.Value
		default:
			return l, validation.NewFieldError("ID", fmt.Sprintf("unknown limit ID '%s'", v.ID))
		}
	}
	return l, nil
}
